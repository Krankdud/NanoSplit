{"version":3,"sources":["dialog/DialogOptions.ts","Constants.ts","dialog/Dialog.tsx","dialogs/EditSplits.tsx","livesplit/Export.ts","dialogs/ExportForm.tsx","livesplit/Parser.ts","dialogs/ImportForm.tsx","menu/Menu.tsx","TimeUtils.ts","Split.tsx","Timer.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["DialogType","src_Constants","Constants","DIALOG_CLOSE_TIME_IN_MS","SKIPPED","SPLITS_MARGIN","SPLIT_HEIGHT","src_dialog_Dialog","_super","Dialog","_this","apply","this","arguments","lastDialogType","Modal","tslib_es6","prototype","render","props","isOpen","options","type","dialogClass","transitionClass","react","className","showCloseButton","onClick","onClose","react_fontawesome_index_es","icon","title","children","renderFooter","cancelButton","confirmButton","showConfirmButton","showCancelButton","onCancel","onConfirm","src_dialogs_EditSplits","EditSplits","call","lastId","handleSubmit","event","preventDefault","category","state","delay","game","segments","slice","handleInputChange","target","currentTarget","name","value","setState","parseInt","forEach","segment","id","onDragEnd","result","destination","removed","splice","source","index","selectedIndex","onInsert","push","onRemove","undefined","makeDroppable","draggables","i","segmentId","react_beautiful_dnd_esm","key","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","defaultValue","onChange","length","droppableId","placeholder","run","Math","floor","onSubmit","toString","Export","nunjucks","autoescape","timeToLiveSplitTime","time","includeMS","milliseconds","seconds","minutes","hours","src_dialogs_ExportForm","ExportForm","exportObjectURL","onDownload","link","document","createElement","setAttribute","href","body","appendChild","window","requestAnimationFrame","MouseEvent","dispatchEvent","removeChild","createXML","liveSplitSegments","bestSegmentTime","realTime","bestTime","splitTimes","pbTime","liveSplitRun","offset","delayToOffset","runXML","createObjectURL","blob","Blob","URL","revokeObjectURL","textArea","componentDidMount","current","componentWillUnmount","Parser","text","xml","DOMParser","parseFromString","documentElement","nodeName","Error","childNodes","nodeValue","root","getElementsByTagName","Array","from","split","bestSegment","src_dialogs_ImportForm","ImportForm","handleChange","fileInput","files","fileReader_1","FileReader","readAsText","onload","e","run_1","convertLiveSplitTimeToMS","onImport","error","errorOcurred","onloadend","splittedTime","abs","splittedSeconds","accept","src_menu_Menu","Menu","sidenavClass","closeCallback","millisecondsToString","showMilliseconds","str","round","hasHours","src_Split_0","Split","getTimeString","totalTime","delta","isCurrentSplit","currentTime","getSplitColor","prevTotalTime","isAhead","isGainingTime","prevSegment","divClass","src_Timer_0","Timer","msString","getTimerColor","isTiming","isFinished","prevTime","index_es","add","free_solid_svg_icons_index_es","src_App_0","App","onTap","splitTimer","startTimer","hasTapped","updateRun","clearInterval","interval","currentSplit","history","segmentTimes","isPaused","startTime","Date","now","createInterval","scrollToSplit","setSegmentTime","pauseTimer","resumeTimer","resetTimer","undoSegment","skipSegment","runSegments","updatePB","currentSegment","segmentPB","segmentBest","setInterval","concat","windowHeight","clientHeight","footer","getElementById","splits","footerHeight","getBoundingClientRect","height","splitsHeight","numOfSplits","scrollTo","behavior","left","top","newSplits","closeDialog","openNewSplits","dialog","contents","showDialog","showMenu","openEditSplits","onRunEditted","Fullscreen","openImport","onExport","setTimeout","openMenu","closeMenu","lastControlText","lastControlAction","historyIndex","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","react_dom","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4b65d4ff.chunk.js","sourcesContent":["export enum DialogType {\n  Modal,\n  Fullscreen\n}\n\ninterface IDialogOptions {\n  onCancel?: () => void;\n  onConfirm?: () => void;\n  showCancelButton?: boolean;\n  showCloseButton?: boolean;\n  showConfirmButton?: boolean;\n  title?: string;\n  type: DialogType;\n}\n\nexport default IDialogOptions;\n","class Constants {\n  public static readonly DIALOG_CLOSE_TIME_IN_MS: number = 250; // This should be a little bit more than the transition time for the dialogs\n  public static readonly SKIPPED: number = -1;\n  public static readonly SPLITS_MARGIN: number = 156;\n  public static readonly SPLIT_HEIGHT: number = 34;\n}\n\nexport default Constants;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as React from \"react\";\nimport \"./Dialog.css\";\nimport IDialogOptions, { DialogType } from \"./DialogOptions\";\n\ninterface IDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  options: IDialogOptions;\n}\n\nclass Dialog extends React.Component<IDialogProps> {\n  private lastDialogType: DialogType = DialogType.Modal;\n\n  public render() {\n    if (this.props.isOpen) {\n      this.lastDialogType = this.props.options.type;\n    }\n\n    const dialogClass =\n      this.lastDialogType === DialogType.Modal ? \"dialog\" : \"dialog-fullscreen\";\n    const transitionClass = this.props.isOpen\n      ? \"dialog-transition-active\"\n      : \"dialog-transition-inactive\";\n\n    return (\n      <div className={transitionClass}>\n        {this.props.options.type === DialogType.Modal && this.props.isOpen && (\n          <div className=\"dialog-background\" />\n        )}\n        <div className={dialogClass}>\n          <div className=\"dialog-header\">\n            {this.props.options.showCloseButton && (\n              <div className=\"dialog-close\" onClick={this.props.onClose}>\n                <FontAwesomeIcon icon=\"times\" />\n              </div>\n            )}\n            {this.props.options.title}\n          </div>\n          <div className=\"dialog-content\">{this.props.children}</div>\n          {this.renderFooter()}\n        </div>\n      </div>\n    );\n  }\n\n  private renderFooter() {\n    if (\n      !this.props.options.showConfirmButton &&\n      !this.props.options.showCancelButton\n    ) {\n      return;\n    }\n\n    let cancelButton;\n    if (this.props.options.showCancelButton) {\n      cancelButton = (\n        <span\n          className=\"dialog-footer-button\"\n          onClick={this.props.options.onCancel}\n        >\n          Cancel\n        </span>\n      );\n    }\n\n    let confirmButton;\n    if (this.props.options.showConfirmButton) {\n      confirmButton = (\n        <span\n          className=\"dialog-footer-button\"\n          onClick={this.props.options.onConfirm}\n        >\n          Confirm\n        </span>\n      );\n    }\n\n    return (\n      <div className=\"dialog-footer\">\n        {cancelButton}\n        {confirmButton}\n      </div>\n    );\n  }\n}\n\nexport default Dialog;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as React from \"react\";\nimport {\n  DragDropContext,\n  Draggable,\n  Droppable,\n  DropResult\n} from \"react-beautiful-dnd\";\nimport IRun from \"src/models/Run\";\nimport ISegment from \"src/models/Segment\";\nimport \"./EditSplits.css\";\n\ninterface IEditSplitsProps {\n  onConfirm: (segments: IRun) => void;\n  run: IRun;\n}\n\ninterface IEditSplitsState {\n  category: string;\n  delay: number;\n  game: string;\n  segments: ISegment[];\n  selectedIndex?: number;\n}\n\nclass EditSplits extends React.Component<IEditSplitsProps, IEditSplitsState> {\n  private lastId: number = 0;\n\n  constructor(props: IEditSplitsProps) {\n    super(props);\n\n    const segments = props.run.segments.slice();\n    for (let i = 0; i < segments.length; i++) {\n      segments[i].id = \"split-\" + i;\n      this.lastId = i;\n    }\n    this.state = {\n      category: this.props.run.category,\n      delay: Math.floor(this.props.run.delay / 1000),\n      game: this.props.run.game,\n      segments\n    };\n  }\n\n  public render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>\n              Game{\" \"}\n              <input\n                type=\"text\"\n                name=\"game\"\n                defaultValue={this.state.game}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              Category{\" \"}\n              <input\n                type=\"text\"\n                name=\"category\"\n                defaultValue={this.state.category}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              Start delay (seconds){\" \"}\n              <input\n                type=\"text\"\n                name=\"delay\"\n                defaultValue={this.state.delay.toString()}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n          <div>\n            <div>Splits</div>\n            <DragDropContext onDragEnd={this.onDragEnd}>\n              {this.makeDroppable()}\n            </DragDropContext>\n          </div>\n          <div className=\"editsplits-buttons\">\n            <span className=\"editsplits-buttons-button\" onClick={this.onRemove}>\n              Remove\n            </span>\n            <span className=\"editsplits-buttons-button\" onClick={this.onInsert}>\n              Insert\n            </span>\n            <input\n              className=\"editsplits-buttons-button\"\n              type=\"submit\"\n              value=\"Done\"\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    this.props.onConfirm({\n      category: this.state.category,\n      delay: this.state.delay * 1000,\n      game: this.state.game,\n      segments: this.state.segments.slice()\n    });\n  };\n\n  private handleInputChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const target = event.currentTarget;\n    const name = target.name;\n    const value = target.value;\n\n    if (name === \"game\") {\n      this.setState({ game: value });\n    } else if (name === \"category\") {\n      this.setState({ category: value });\n    } else if (name === \"delay\") {\n      this.setState({ delay: parseInt(value, 10) });\n    } else {\n      this.state.segments.forEach(segment => {\n        if (segment.id === name) {\n          segment.title = value;\n        }\n      });\n    }\n  };\n\n  private onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const segments = this.state.segments.slice();\n    const [removed] = segments.splice(result.source.index, 1);\n    segments.splice(result.destination.index, 0, removed);\n\n    this.setState({ segments });\n\n    if (result.source.index === this.state.selectedIndex) {\n      this.setState({ selectedIndex: result.destination.index });\n    }\n  };\n\n  private onInsert = () => {\n    this.lastId++;\n    const segment: ISegment = {\n      id: \"split-\" + this.lastId,\n      title: \"\"\n    };\n\n    const segments = this.state.segments.slice();\n    if (!this.state.selectedIndex) {\n      segments.push(segment);\n    } else {\n      segments.splice(this.state.selectedIndex, 0, segment);\n    }\n\n    this.setState({ segments });\n  };\n\n  private onRemove = () => {\n    if (!this.state.selectedIndex) {\n      return;\n    }\n\n    const segments = this.state.segments.slice();\n    segments.splice(this.state.selectedIndex, 1);\n    this.setState({\n      segments,\n      selectedIndex: undefined\n    });\n  };\n\n  private makeDroppable = () => {\n    const draggables: JSX.Element[] = [];\n    for (let i = 0; i < this.state.segments.length; i++) {\n      const segmentId = this.state.segments[i].id;\n\n      let className = \"editsplits-split\";\n      if (this.state.selectedIndex === i) {\n        className += \" editsplits-split-selected\";\n      }\n\n      draggables.push(\n        <Draggable key={segmentId} draggableId={segmentId} index={i}>\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              className={className}\n              // tslint:disable-next-line:jsx-no-lambda\n              onClick={() => {\n                this.setState({ selectedIndex: i });\n              }}\n            >\n              <input\n                type=\"text\"\n                name={segmentId}\n                defaultValue={this.state.segments[i].title}\n                onChange={this.handleInputChange}\n              />\n              <div className=\"editsplits-split-sort\">\n                <FontAwesomeIcon icon=\"sort\" />\n              </div>\n            </div>\n          )}\n        </Draggable>\n      );\n    }\n\n    return (\n      <Droppable droppableId=\"editSplitsDroppable\">\n        {(provided, snapshot) => (\n          <div ref={provided.innerRef}>\n            {draggables}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    );\n  };\n}\n\nexport default EditSplits;\n","import * as nunjucks from \"nunjucks\";\n\nfunction exportLiveSplitToXML(run: ILiveSplitRun) {\n  nunjucks.configure({ autoescape: true });\n  const xmlString = nunjucks.render(\"livesplit.njk\", run);\n  return xmlString;\n}\n\nexport default exportLiveSplitToXML;\n","import * as React from \"react\";\nimport Constants from \"src/Constants\";\nimport exportLiveSplitToXML from \"src/livesplit/Export\";\nimport IRun from \"src/models/Run\";\nimport \"./ExportForm.css\";\n\ninterface IExportFormProps {\n  run: IRun;\n}\n\nclass ExportForm extends React.Component<IExportFormProps> {\n  private textArea: React.RefObject<HTMLTextAreaElement>;\n  private runXML: string;\n  private exportObjectURL: string | null = null;\n\n  constructor(props: IExportFormProps) {\n    super(props);\n    this.textArea = React.createRef<HTMLTextAreaElement>();\n\n    this.createXML();\n    this.createObjectURL();\n  }\n\n  public componentDidMount() {\n    if (this.textArea.current) {\n      this.textArea.current.value = this.runXML;\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.exportObjectURL) {\n      window.URL.revokeObjectURL(this.exportObjectURL);\n    }\n  }\n\n  public render() {\n    return (\n      <div>\n        <div className=\"export-warning\">\n          Do not overwrite your old LiveSplit splits. You may lose additional\n          data.\n        </div>\n        <div className=\"export-button\" onClick={this.onDownload}>\n          Download\n        </div>\n        <div className=\"export-ios\">\n          iOS users: Copy and paste the text below to a new file.\n        </div>\n        <textarea className=\"export-textarea\" ref={this.textArea} />\n      </div>\n    );\n  }\n\n  private onDownload = () => {\n    if (!this.exportObjectURL) {\n      return;\n    }\n\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"download\", \"splits.lss\");\n    link.href = this.exportObjectURL;\n    document.body.appendChild(link);\n\n    window.requestAnimationFrame(() => {\n      const event = new MouseEvent(\"click\");\n      link.dispatchEvent(event);\n      document.body.removeChild(link);\n    });\n  };\n\n  private createXML = () => {\n    const run = this.props.run;\n    const liveSplitSegments: ILiveSplitSegment[] = [];\n    run.segments.forEach(segment => {\n      liveSplitSegments.push({\n        bestSegmentTime: {\n          realTime:\n            segment.bestTime && segment.bestTime !== Constants.SKIPPED\n              ? timeToLiveSplitTime(segment.bestTime)\n              : null\n        },\n        name: segment.title,\n        splitTimes: [\n          {\n            realTime:\n              segment.pbTime && segment.pbTime !== Constants.SKIPPED\n                ? timeToLiveSplitTime(segment.pbTime)\n                : null\n          }\n        ]\n      });\n    });\n\n    const liveSplitRun: ILiveSplitRun = {\n      category: run.category,\n      game: run.game,\n      offset: delayToOffset(run.delay),\n      segments: liveSplitSegments\n    };\n    this.runXML = exportLiveSplitToXML(liveSplitRun);\n  };\n\n  private createObjectURL = () => {\n    const blob = new Blob([this.runXML], { type: \"application/xml\" });\n\n    if (this.exportObjectURL) {\n      window.URL.revokeObjectURL(this.exportObjectURL);\n    }\n    this.exportObjectURL = window.URL.createObjectURL(blob);\n  };\n}\n\nfunction delayToOffset(delay: number): string {\n  if (delay === 0) {\n    return \"00:00:00\";\n  }\n  return \"-\" + timeToLiveSplitTime(delay, false);\n}\n\nfunction timeToLiveSplitTime(time: number, includeMS: boolean = true): string {\n  const milliseconds = time % 1000;\n  const seconds = Math.floor(time / 1000) % 60;\n  const minutes = Math.floor(time / 60000) % 60;\n  const hours = Math.floor(time / 360000);\n  return (\n    \"\" +\n    (hours < 10 ? \"0\" + hours : hours) +\n    \":\" +\n    (minutes < 10 ? \"0\" + minutes : minutes) +\n    \":\" +\n    (seconds < 10 ? \"0\" + seconds : seconds) +\n    (includeMS\n      ? \".\" +\n        (milliseconds < 10\n          ? \"00\" + milliseconds\n          : milliseconds < 100\n          ? \"0\" + milliseconds\n          : milliseconds)\n      : \"\")\n  );\n}\n\nexport default ExportForm;\n","function parseLiveSplit(text: string): ILiveSplitRun {\n  const parser = new DOMParser();\n  const xml = parser.parseFromString(text, \"application/xml\");\n  if (xml.documentElement && xml.documentElement.nodeName === \"parseerror\") {\n    throw Error(\n      xml.documentElement.childNodes[0].nodeValue || \"Error parsing XML\"\n    );\n  }\n  const root = xml.getElementsByTagName(\"Run\")[0];\n  const game = root.getElementsByTagName(\"GameName\")[0].childNodes[0].nodeValue;\n  const category = root.getElementsByTagName(\"CategoryName\")[0].childNodes[0]\n    .nodeValue;\n  const offset = root.getElementsByTagName(\"Offset\")[0].childNodes[0].nodeValue;\n\n  // Segments\n  const segments: ILiveSplitSegment[] = [];\n  const xmlSegments = Array.from(\n    root.getElementsByTagName(\"Segments\")[0].children\n  );\n  xmlSegments.forEach(segment => {\n    const name = segment.getElementsByTagName(\"Name\")[0].childNodes[0]\n      .nodeValue;\n    const split: ILiveSplitSplit = {\n      realTime: segment\n        .getElementsByTagName(\"SplitTimes\")[0]\n        .getElementsByTagName(\"RealTime\")[0].childNodes[0].nodeValue\n    };\n    const bestSegment: ILiveSplitSplit = {\n      realTime: segment\n        .getElementsByTagName(\"BestSegmentTime\")[0]\n        .getElementsByTagName(\"RealTime\")[0].childNodes[0].nodeValue\n    };\n    segments.push({\n      bestSegmentTime: bestSegment,\n      name,\n      splitTimes: [split]\n    });\n  });\n\n  return {\n    category,\n    game,\n    offset,\n    segments\n  };\n}\n\nexport default parseLiveSplit;\n","import * as React from \"react\";\nimport Constants from \"src/Constants\";\nimport parseLiveSplit from \"../livesplit/Parser\";\nimport IRun from \"../models/Run\";\nimport \"./ImportForm.css\";\n\ninterface IImportFormProps {\n  onImport: (run: IRun) => void;\n}\n\ninterface IImportFormState {\n  errorOcurred: boolean;\n}\n\nclass ImportForm extends React.Component<IImportFormProps, IImportFormState> {\n  private fileInput: React.RefObject<HTMLInputElement>;\n\n  constructor(props: IImportFormProps) {\n    super(props);\n    this.state = {\n      errorOcurred: false\n    };\n    this.fileInput = React.createRef<HTMLInputElement>();\n  }\n\n  public render() {\n    return (\n      <div>\n        {this.state.errorOcurred && (\n          <div className=\"import-error\">\n            An error occurred while reading the file. Please try again.\n          </div>\n        )}\n        <div className=\"import-description\">\n          Import splits from <a href=\"http://www.livesplit.org\">LiveSplit</a>\n        </div>\n        <form>\n          <label className=\"import-button\">\n            Choose a file\n            <input\n              type=\"file\"\n              accept=\".lss\"\n              ref={this.fileInput}\n              onChange={this.handleChange}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n\n  private handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    if (\n      this.fileInput.current &&\n      this.fileInput.current.files &&\n      this.fileInput.current.files.length > 0\n    ) {\n      const fileReader = new FileReader();\n      fileReader.readAsText(this.fileInput.current.files[0]);\n\n      fileReader.onload = (e: ProgressEvent) => {\n        const result = fileReader.result;\n        if (typeof result === \"string\") {\n          try {\n            const liveSplitRun = parseLiveSplit(result);\n            const run: IRun = {\n              category: liveSplitRun.category || \"\",\n              delay: liveSplitRun.offset\n                ? this.convertLiveSplitTimeToMS(liveSplitRun.offset)\n                : 0,\n              game: liveSplitRun.game || \"\",\n              segments: []\n            };\n            liveSplitRun.segments.forEach(segment => {\n              run.segments.push({\n                bestTime: this.convertLiveSplitTimeToMS(\n                  segment.bestSegmentTime.realTime\n                ),\n                id: \"\",\n                pbTime: this.convertLiveSplitTimeToMS(\n                  segment.splitTimes[0].realTime\n                ),\n                title: segment.name || \"\"\n              });\n            });\n            this.props.onImport(run);\n          } catch (error) {\n            this.setState({ errorOcurred: true });\n          }\n        }\n      };\n\n      fileReader.onloadend = (e: ProgressEvent) => {\n        if (fileReader.error) {\n          this.setState({ errorOcurred: true });\n        }\n      };\n    }\n  };\n\n  private convertLiveSplitTimeToMS = (time: string | null) => {\n    if (!time) {\n      return Constants.SKIPPED;\n    }\n    const splittedTime = time.split(\":\");\n    const hours = Math.abs(parseInt(splittedTime[0], 10));\n    const minutes = parseInt(splittedTime[1], 10);\n    const splittedSeconds = splittedTime[2].split(\".\");\n    const seconds = parseInt(splittedSeconds[0], 10);\n    const milliseconds =\n      splittedSeconds.length > 1\n        ? parseInt(splittedSeconds[1].slice(0, 3), 10)\n        : 0;\n    return (\n      milliseconds +\n      seconds * 1000 +\n      minutes * 60 * 1000 +\n      hours * 60 * 60 * 1000\n    );\n  };\n}\n\nexport default ImportForm;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as React from \"react\";\nimport \"./Menu.css\";\n\ninterface IMenuProps {\n  closeCallback: () => void;\n  isOpen: boolean;\n}\n\nclass Menu extends React.Component<IMenuProps> {\n  public render() {\n    const sidenavClass = this.props.isOpen\n      ? \"sidenav sidenav-active\"\n      : \"sidenav sidenav-inactive\";\n    return (\n      <div>\n        {this.props.isOpen && <div className=\"sidenav-background\" />}\n        <div className={sidenavClass}>\n          <div className=\"sidenav-close\" onClick={this.props.closeCallback}>\n            <FontAwesomeIcon icon=\"times\" />\n          </div>\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Menu;\n","/**\n * Converts milliseconds to a string.\n * Only shows milliseconds when the time is less than a minute.\n *\n * @param {number} milliseconds Time to convert.\n * @param {boolean} showMilliseconds Show milliseconds when time is less than a minute.\n * @returns String containing the time e.g. 1:23:40\n */\nexport function millisecondsToString(\n  milliseconds: number,\n  showMilliseconds: boolean = true\n) {\n  // Check if the time is negative\n  let str = milliseconds < 0 ? \"-\" : \"\";\n  milliseconds = Math.abs(milliseconds);\n\n  let seconds = Math.floor(milliseconds / 1000);\n  let minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  milliseconds = Math.round((milliseconds % 1000) / 10);\n  minutes %= 60;\n  seconds %= 60;\n\n  // Only show milliseconds when hours and minutes are 0\n  if (showMilliseconds && hours === 0 && minutes === 0) {\n    str += seconds + \".\";\n    if (milliseconds < 10) {\n      str += \"0\";\n    }\n    str += milliseconds;\n  } else {\n    let hasHours = false;\n    if (hours > 0) {\n      hasHours = true;\n      str += hours + \":\";\n    }\n    if (minutes > 0) {\n      if (minutes < 10 && hasHours) {\n        str += \"0\";\n      }\n      str += minutes + \":\";\n    } else if (hasHours) {\n      str += \"00:\";\n    } else {\n      str += \"0:\";\n    }\n\n    if (seconds < 10) {\n      str += \"0\";\n    }\n    str += seconds;\n  }\n\n  return str;\n}\n","import * as React from \"react\";\nimport Constants from \"./Constants\";\nimport ISegment from \"./models/Segment\";\nimport \"./Split.css\";\nimport \"./TimerColors.css\";\nimport { millisecondsToString } from \"./TimeUtils\";\n\ninterface ISplitProps {\n  currentTime: number;\n  isCurrentSplit: boolean;\n  prevSegment?: ISegment;\n  prevTotalTime?: number;\n  segment: ISegment;\n  totalTime?: number;\n}\n\n/**\n * Component that displays a split.\n *\n * @class Split\n * @extends {React.Component<ISplitProps>}\n */\nclass Split extends React.Component<ISplitProps> {\n  public render() {\n    let divClass = \"split\";\n    if (this.props.isCurrentSplit) {\n      divClass += \" split-active\";\n    }\n\n    return (\n      <div className={divClass}>\n        <span className=\"split-title\">{this.props.segment.title}</span>\n        <span className={\"split-time \" + this.getSplitColor()}>\n          {this.getTimeString()}\n        </span>\n      </div>\n    );\n  }\n\n  private getTimeString = () => {\n    let time: string = \"-\";\n    if (this.props.totalTime === Constants.SKIPPED) {\n      time = \"-\";\n    } else if (this.props.totalTime) {\n      if (this.props.segment.pbTime) {\n        // Display the delta if there is a time for this segment in the user's PB\n        const delta = this.props.totalTime - this.props.segment.pbTime;\n        time =\n          (delta > 0 ? \"+\" : \"-\") +\n          millisecondsToString(Math.abs(delta), false);\n      } else {\n        time = millisecondsToString(this.props.totalTime, false);\n      }\n    } else if (this.props.segment.pbTime) {\n      if (\n        this.props.isCurrentSplit &&\n        this.props.currentTime > this.props.segment.pbTime\n      ) {\n        // Display current time loss if this is the current split and the user is losing time\n        const delta = this.props.currentTime - this.props.segment.pbTime;\n        time = \"+\" + millisecondsToString(delta, false);\n      } else {\n        time = millisecondsToString(this.props.segment.pbTime, false);\n      }\n    }\n    return time;\n  };\n\n  private getSplitColor = () => {\n    if (\n      (!this.props.isCurrentSplit && !this.props.totalTime) ||\n      this.props.totalTime === Constants.SKIPPED ||\n      !this.props.segment.pbTime\n    ) {\n      return \"\";\n    }\n\n    if (\n      this.props.segment.bestTime &&\n      this.props.totalTime &&\n      this.props.prevTotalTime &&\n      this.props.prevTotalTime !== Constants.SKIPPED &&\n      this.props.totalTime - this.props.prevTotalTime <\n        this.props.segment.bestTime\n    ) {\n      return \"best-segment\";\n    }\n\n    const time = this.props.totalTime || this.props.currentTime;\n    const isAhead = time < this.props.segment.pbTime;\n    let isGainingTime = isAhead;\n\n    if (\n      this.props.prevSegment &&\n      this.props.prevSegment.pbTime &&\n      this.props.prevSegment.pbTime !== Constants.SKIPPED &&\n      this.props.prevTotalTime &&\n      this.props.prevTotalTime !== Constants.SKIPPED\n    ) {\n      isGainingTime =\n        time - this.props.prevTotalTime <\n        this.props.segment.pbTime - this.props.prevSegment.pbTime;\n    }\n\n    if (isAhead) {\n      if (!this.props.totalTime && isGainingTime) {\n        return \"\";\n      }\n\n      return isGainingTime ? \"ahead-gaining-time\" : \"ahead-losing-time\";\n    } else {\n      return isGainingTime ? \"behind-gaining-time\" : \"behind-losing-time\";\n    }\n  };\n}\n\nexport default Split;\n","import * as React from \"react\";\nimport Constants from \"./Constants\";\nimport ISegment from \"./models/Segment\";\nimport \"./Timer.css\";\nimport { millisecondsToString } from \"./TimeUtils\";\n\ninterface ITimerProps {\n  isFinished: boolean;\n  isTiming: boolean;\n  prevSegment?: ISegment;\n  prevTime?: number;\n  segment?: ISegment;\n  time: number;\n}\n\nclass Timer extends React.Component<ITimerProps> {\n  public render() {\n    const milliseconds = Math.floor((Math.abs(this.props.time) % 1000) / 10);\n    let msString = \".\";\n    if (milliseconds < 10) {\n      msString += \"0\";\n    }\n    msString += milliseconds;\n\n    return (\n      <div className={\"timer \" + this.getTimerColor()}>\n        <span>{millisecondsToString(this.props.time, false)}</span>\n        <span className=\"timer-decimal\">{msString}</span>\n      </div>\n    );\n  }\n\n  private getTimerColor() {\n    if (\n      this.props.time < 0 ||\n      (!this.props.isTiming && !this.props.isFinished)\n    ) {\n      return \"\";\n    }\n\n    if (this.props.segment && this.props.segment.pbTime) {\n      const isAhead = this.props.time < this.props.segment.pbTime;\n      let isGainingTime = isAhead;\n\n      if (\n        this.props.prevSegment &&\n        this.props.prevSegment.pbTime &&\n        this.props.prevSegment.pbTime !== Constants.SKIPPED &&\n        this.props.prevTime &&\n        this.props.prevTime !== Constants.SKIPPED\n      ) {\n        isGainingTime =\n          this.props.time - this.props.prevTime <\n          this.props.segment.pbTime - this.props.prevSegment.pbTime;\n      }\n\n      if (isAhead) {\n        if (this.props.isFinished) {\n          return \"personal-best\";\n        }\n        return isGainingTime ? \"ahead-gaining-time\" : \"ahead-losing-time\";\n      } else {\n        return isGainingTime ? \"behind-gaining-time\" : \"behind-losing-time\";\n      }\n    }\n\n    return this.props.isFinished ? \"personal-best\" : \"\";\n  }\n}\n\nexport default Timer;\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faBars, faSort, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport * as React from \"react\";\nimport \"./App.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Constants from \"./Constants\";\nimport Dialog from \"./dialog/Dialog\";\nimport { DialogType } from \"./dialog/DialogOptions\";\nimport EditSplits from \"./dialogs/EditSplits\";\nimport ExportForm from \"./dialogs/ExportForm\";\nimport ImportForm from \"./dialogs/ImportForm\";\nimport Menu from \"./menu/Menu\";\nimport IDialogData from \"./models/DialogData\";\nimport IRun from \"./models/Run\";\nimport ISegment from \"./models/Segment\";\nimport Split from \"./Split\";\nimport Timer from \"./Timer\";\n\nlibrary.add(faBars, faSort, faTimes);\n\ninterface IAppState {\n  currentTime: number;\n  currentSplit: number;\n  dialog: IDialogData;\n  hasTapped: boolean;\n  history: IHistory[];\n  isFinished: boolean;\n  isPaused: boolean;\n  isTiming: boolean;\n  run: IRun;\n  showDialog: boolean;\n  showMenu: boolean;\n  startTime: number;\n}\n\ninterface IHistory {\n  segmentTimes: number[];\n}\n\nclass App extends React.Component<{}, IAppState> {\n  private interval: number;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      currentSplit: 0,\n      currentTime: 0,\n      dialog: {\n        options: {\n          showCloseButton: true,\n          title: \"\",\n          type: DialogType.Modal\n        }\n      },\n      hasTapped: false,\n      history: [{ segmentTimes: [] }],\n      isFinished: false,\n      isPaused: false,\n      isTiming: false,\n      run: {\n        category: \"\",\n        delay: 0,\n        game: \"\",\n        segments: []\n      },\n      showDialog: false,\n      showMenu: false,\n      startTime: Date.now()\n    };\n  }\n\n  public componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  public render() {\n    let lastControlText = \"Start\";\n    let lastControlAction = this.startTimer;\n    if (this.state.isTiming) {\n      if (this.state.isPaused) {\n        lastControlText = \"Resume\";\n        lastControlAction = this.resumeTimer;\n      } else {\n        lastControlText = \"Pause\";\n        lastControlAction = this.pauseTimer;\n      }\n    }\n\n    const splits: JSX.Element[] = [];\n    for (let i = 0; i < this.state.run.segments.length; i++) {\n      const historyIndex = !this.state.isTiming\n        ? this.state.history.length - 1\n        : this.state.currentSplit;\n      splits.push(\n        <Split\n          key={i}\n          segment={this.state.run.segments[i]}\n          currentTime={this.state.currentTime}\n          isCurrentSplit={this.state.isTiming && this.state.currentSplit === i}\n          prevSegment={this.state.run.segments[i - 1]}\n          prevTotalTime={this.state.history[historyIndex].segmentTimes[i - 1]}\n          totalTime={this.state.history[historyIndex].segmentTimes[i]}\n        />\n      );\n    }\n\n    let title: JSX.Element;\n    if (this.state.run.game === \"\" && this.state.run.category === \"\") {\n      title = <div className=\"title title-large\">NanoSplit</div>;\n    } else if (this.state.run.game === \"\") {\n      title = (\n        <div className=\"title title-large\">{this.state.run.category}</div>\n      );\n    } else if (this.state.run.category === \"\") {\n      title = <div className=\"title title-large\">{this.state.run.game}</div>;\n    } else {\n      title = (\n        <div className=\"title\">\n          {this.state.run.game}\n          <br />\n          {this.state.run.category}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"clickable\" onClick={this.onTap} />\n        <div className=\"header\">\n          <div className=\"title-bar\">\n            <div className=\"sidenav-menu\" onClick={this.openMenu}>\n              <FontAwesomeIcon icon=\"bars\" />\n            </div>\n            {title}\n          </div>\n          <div onClick={this.onTap}>\n            <Timer\n              isFinished={this.state.isFinished}\n              isTiming={this.state.isTiming}\n              prevSegment={this.state.run.segments[this.state.currentSplit - 1]}\n              prevTime={\n                this.state.history[this.state.currentSplit].segmentTimes[\n                  this.state.currentSplit - 1\n                ]\n              }\n              segment={this.state.run.segments[this.state.currentSplit]}\n              time={this.state.currentTime}\n            />\n          </div>\n        </div>\n        <div\n          className={\n            this.state.hasTapped ? \"splits\" : \"splits splits-hint-active\"\n          }\n          id=\"splits\"\n          onClick={this.onTap}\n        >\n          {splits}\n        </div>\n        <div id=\"footer\" className=\"footer\">\n          <div className=\"controls\">\n            <button className=\"controls-button ml-0\" onClick={this.undoSegment}>\n              Undo\n            </button>\n            <button className=\"controls-button\" onClick={this.skipSegment}>\n              Skip\n            </button>\n            <button className=\"controls-button\" onClick={this.resetTimer}>\n              Reset\n            </button>\n            <button\n              className=\"controls-button mr-0\"\n              onClick={lastControlAction}\n            >\n              {lastControlText}\n            </button>\n          </div>\n          <div\n            className={\n              this.state.hasTapped ? \"tap-hint tap-hint-done\" : \"tap-hint\"\n            }\n          >\n            Tap anywhere to start/split the timer\n          </div>\n        </div>\n        <Menu isOpen={this.state.showMenu} closeCallback={this.closeMenu}>\n          <div className=\"sidenav-item\" onClick={this.openNewSplits}>\n            New splits\n          </div>\n          <div className=\"sidenav-item\" onClick={this.openEditSplits}>\n            Edit splits\n          </div>\n          <div className=\"sidenav-item\" onClick={this.openImport}>\n            Import\n          </div>\n          <div className=\"sidenav-item\" onClick={this.onExport}>\n            Export\n          </div>\n          <div className=\"sidenav-item\">Settings</div>\n        </Menu>\n        <Dialog\n          isOpen={this.state.showDialog}\n          onClose={this.closeDialog}\n          options={this.state.dialog.options}\n        >\n          {this.state.dialog.contents}\n        </Dialog>\n      </div>\n    );\n  }\n\n  private onTap = () => {\n    if (this.state.isTiming) {\n      this.splitTimer();\n    } else {\n      this.startTimer();\n    }\n    this.setState({ hasTapped: true });\n  };\n\n  private startTimer = () => {\n    this.updateRun();\n\n    clearInterval(this.interval);\n    this.setState({\n      currentSplit: 0,\n      history: [{ segmentTimes: [] }],\n      isFinished: false,\n      isPaused: false,\n      isTiming: true,\n      startTime: Date.now() + this.state.run.delay\n    });\n    this.createInterval();\n\n    this.scrollToSplit(0);\n  };\n\n  private splitTimer = () => {\n    if (\n      this.state.isPaused ||\n      !this.state.isTiming ||\n      this.state.currentTime < 0\n    ) {\n      return;\n    }\n\n    let currentSplit = this.state.currentSplit;\n    this.setSegmentTime(this.state.currentTime);\n\n    // Stop the timer if this was the last split\n    if (this.state.currentSplit >= this.state.run.segments.length - 1) {\n      clearInterval(this.interval);\n      this.setState({\n        isFinished: true,\n        isTiming: false\n      });\n    } else {\n      currentSplit += 1;\n      this.setState({ currentSplit });\n    }\n\n    this.scrollToSplit(currentSplit);\n  };\n\n  private pauseTimer = () => {\n    clearInterval(this.interval);\n    this.setState({\n      isPaused: true\n    });\n  };\n\n  private resumeTimer = () => {\n    const now = Date.now();\n    this.setState({\n      isPaused: false,\n      startTime: now - this.state.currentTime\n    });\n    this.createInterval();\n  };\n\n  private resetTimer = () => {\n    this.updateRun();\n\n    clearInterval(this.interval);\n    this.setState({\n      currentSplit: 0,\n      currentTime: -this.state.run.delay,\n      history: [{ segmentTimes: [] }],\n      isFinished: false,\n      isTiming: false\n    });\n  };\n\n  private undoSegment = () => {\n    if (this.state.currentSplit === 0 || !this.state.isTiming) {\n      return;\n    }\n\n    this.setState({\n      currentSplit: this.state.currentSplit - 1,\n      history: this.state.history.slice(0, this.state.currentSplit),\n      isFinished: false\n    });\n  };\n\n  private skipSegment = () => {\n    if (!this.state.isTiming) {\n      return;\n    }\n\n    this.setSegmentTime(Constants.SKIPPED);\n\n    this.setState({\n      currentSplit: this.state.currentSplit + 1\n    });\n  };\n\n  private updateRun = () => {\n    if (\n      this.state.history.length === 1 ||\n      this.state.run.segments.length === 0\n    ) {\n      return;\n    }\n\n    const segmentTimes = this.state.history[this.state.history.length - 1]\n      .segmentTimes;\n    const runSegments = this.state.run.segments;\n    const pbTime = runSegments[runSegments.length - 1].pbTime;\n    let updatePB = false;\n    if (\n      this.state.isFinished &&\n      pbTime &&\n      segmentTimes[segmentTimes.length - 1] < pbTime\n    ) {\n      updatePB = true;\n    }\n\n    const segments: ISegment[] = [];\n    for (let i = 0; i < runSegments.length; i++) {\n      const currentSegment = this.state.run.segments[i];\n      const segmentPB = updatePB ? segmentTimes[i] : currentSegment.pbTime;\n\n      let segmentBest = currentSegment.bestTime;\n      if (i < segmentTimes.length) {\n        const time =\n          i === 0 ? segmentTimes[i] : segmentTimes[i] - segmentTimes[i - 1];\n        if (!segmentBest || (segmentBest && time < segmentBest)) {\n          segmentBest = time;\n        }\n      }\n\n      segments.push({\n        bestTime: segmentBest,\n        id: currentSegment.id,\n        pbTime: segmentPB,\n        title: currentSegment.title\n      });\n    }\n\n    this.setState({\n      run: {\n        category: this.state.run.category,\n        delay: this.state.run.delay,\n        game: this.state.run.game,\n        segments\n      }\n    });\n  };\n\n  private createInterval = () => {\n    this.interval = setInterval(() => {\n      this.setState({\n        currentTime: Date.now() - this.state.startTime\n      });\n    });\n  };\n\n  private setSegmentTime = (time: number) => {\n    const currentSplit = this.state.currentSplit;\n    const segmentTimes = this.state.history[currentSplit].segmentTimes.concat([\n      time\n    ]);\n    this.setState({\n      history: this.state.history.concat([{ segmentTimes }])\n    });\n  };\n\n  private scrollToSplit = (currentSplit: number) => {\n    if (document.documentElement === null) {\n      return;\n    }\n    const windowHeight = document.documentElement.clientHeight;\n    const footer = document.getElementById(\"footer\");\n    const splits = document.getElementById(\"splits\");\n    if (footer && splits) {\n      const footerHeight = footer.getBoundingClientRect().height;\n      const splitsHeight = splits.getBoundingClientRect().height;\n      const numOfSplits = this.state.run.segments.length;\n      const bottom =\n        Constants.SPLITS_MARGIN +\n        splitsHeight -\n        (numOfSplits - currentSplit - 1) * Constants.SPLIT_HEIGHT;\n      const target = bottom - windowHeight + footerHeight;\n      window.scrollTo({\n        behavior: \"smooth\",\n        left: 0,\n        top: target\n      });\n    }\n  };\n\n  private newSplits = () => {\n    const run: IRun = {\n      category: \"\",\n      delay: 0,\n      game: \"\",\n      segments: []\n    };\n    this.setState({ currentTime: 0, run });\n    this.closeDialog();\n  };\n\n  private openNewSplits = () => {\n    this.setState({\n      dialog: {\n        contents: (\n          <div>\n            Are you sure you want to create new splits? Your previous splits\n            will be erased.\n          </div>\n        ),\n        options: {\n          onCancel: this.closeDialog,\n          onConfirm: this.newSplits,\n          showCancelButton: true,\n          showCloseButton: false,\n          showConfirmButton: true,\n          title: \"Create new splits\",\n          type: DialogType.Modal\n        }\n      },\n      showDialog: true,\n      showMenu: false\n    });\n  };\n\n  private openEditSplits = () => {\n    this.setState({\n      dialog: {\n        contents: (\n          <EditSplits run={this.state.run} onConfirm={this.onRunEditted} />\n        ),\n        options: {\n          showCloseButton: true,\n          title: \"Edit splits\",\n          type: DialogType.Fullscreen\n        }\n      },\n      showDialog: true,\n      showMenu: false\n    });\n  };\n\n  private openImport = () => {\n    this.setState({\n      dialog: {\n        contents: <ImportForm onImport={this.onRunEditted} />,\n        options: {\n          showCloseButton: true,\n          title: \"Import\",\n          type: DialogType.Modal\n        }\n      },\n      showDialog: true,\n      showMenu: false\n    });\n  };\n\n  private onExport = () => {\n    this.setState({\n      dialog: {\n        contents: <ExportForm run={this.state.run} />,\n        options: {\n          showCloseButton: true,\n          title: \"Export\",\n          type: DialogType.Modal\n        }\n      },\n      showDialog: true,\n      showMenu: false\n    });\n  };\n\n  private onRunEditted = (run: IRun) => {\n    this.resetTimer();\n    this.setState({ currentTime: -run.delay, run });\n    this.closeDialog();\n  };\n\n  private closeDialog = () => {\n    this.setState({ showDialog: false });\n    window.setTimeout(() => {\n      this.setState({\n        dialog: {\n          options: {\n            showCloseButton: true,\n            title: \"\",\n            type: DialogType.Modal\n          }\n        }\n      });\n    }, Constants.DIALOG_CLOSE_TIME_IN_MS);\n  };\n\n  private openMenu = () => {\n    this.setState({ showMenu: true });\n  };\n\n  private closeMenu = () => {\n    this.setState({ showMenu: false });\n  };\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}