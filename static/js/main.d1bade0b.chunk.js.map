{"version":3,"sources":["dialog/DialogOptions.ts","Constants.ts","dialog/Dialog.tsx","dialogs/EditSplits.tsx","menu/Menu.tsx","TimeUtils.ts","Split.tsx","Timer.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["DialogType","src_Constants","Constants","DIALOG_CLOSE_TIME_IN_MS","SKIPPED","SPLITS_MARGIN","SPLIT_HEIGHT","src_dialog_Dialog","_super","Dialog","_this","apply","this","arguments","lastDialogType","Modal","tslib_es6","prototype","render","props","isOpen","options","type","dialogClass","transitionClass","headerClass","react","className","showCloseButton","onClick","onClose","react_fontawesome_index_es","icon","title","children","renderFooter","cancelButton","confirmButton","showConfirmButton","showCancelButton","onCancel","onConfirm","src_dialogs_EditSplits","EditSplits","call","lastId","handleSubmit","event","preventDefault","category","state","game","segments","slice","handleInputChange","target","currentTarget","name","value","setState","onDragEnd","result","destination","removed","splice","source","index","selectedIndex","onInsert","segment","id","push","onRemove","undefined","makeDroppable","draggables","i","segmentId","react_beautiful_dnd_esm","key","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","defaultValue","length","droppableId","placeholder","run","onSubmit","onChange","src_menu_Menu","Menu","sidenavClass","closeCallback","millisecondsToString","milliseconds","showMilliseconds","str","seconds","Math","floor","minutes","hours","round","hasHours","src_Split_0","Split","time","segmentTime","pbTime","delta","abs","isCurrentSplit","currentTime","divClass","src_Timer_0","Timer","msString","index_es","add","free_solid_svg_icons_index_es","src_App_0","App","startTimer","clearInterval","interval","currentSplit","history","segmentTimes","isPaused","isTiming","startTime","Date","now","createInterval","scrollToSplit","splitTimer","setSegmentTime","pauseTimer","resumeTimer","resetTimer","undoSegment","skipSegment","setInterval","concat","document","documentElement","windowHeight","clientHeight","controls","getElementById","splits","controlsHeight","getBoundingClientRect","height","splitsHeight","numOfSplits","window","scrollTo","behavior","left","top","newSplits","showDialog","showMenu","openNewSplits","dialog","contents","closeDialog","openEditSplits","confirmEditSplits","Fullscreen","setTimeout","openMenu","closeMenu","componentWillUnmount","clickAction","lastControlText","lastControlAction","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom","URL","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d1bade0b.chunk.js","sourcesContent":["export enum DialogType {\n  Modal,\n  Fullscreen\n}\n\ninterface IDialogOptions {\n  onCancel?: () => void;\n  onConfirm?: () => void;\n  showCancelButton?: boolean;\n  showCloseButton?: boolean;\n  showConfirmButton?: boolean;\n  title?: string;\n  type: DialogType;\n}\n\nexport default IDialogOptions;\n","class Constants {\n  public static readonly DIALOG_CLOSE_TIME_IN_MS: number = 250; // This should be a little bit more than the transition time for the dialogs\n  public static readonly SKIPPED: number = -1;\n  public static readonly SPLITS_MARGIN: number = 156;\n  public static readonly SPLIT_HEIGHT: number = 34;\n}\n\nexport default Constants;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as React from \"react\";\nimport \"./Dialog.css\";\nimport IDialogOptions, { DialogType } from \"./DialogOptions\";\n\ninterface IDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  options: IDialogOptions;\n}\n\nclass Dialog extends React.Component<IDialogProps> {\n  private lastDialogType: DialogType = DialogType.Modal;\n\n  public render() {\n    if (this.props.isOpen) {\n      this.lastDialogType = this.props.options.type;\n    }\n\n    const dialogClass =\n      this.lastDialogType === DialogType.Modal ? \"dialog\" : \"dialog-fullscreen\";\n    const transitionClass = this.props.isOpen\n      ? \"dialog-transition-active\"\n      : \"dialog-transition-inactive\";\n    const headerClass =\n      this.lastDialogType === DialogType.Modal\n        ? \"dialog-header\"\n        : \"dialog-header dialog-header-fullscreen\";\n\n    return (\n      <div className={transitionClass}>\n        {this.props.options.type === DialogType.Modal && this.props.isOpen && (\n          <div className=\"dialog-background\" />\n        )}\n        <div className={dialogClass}>\n          <div className={headerClass}>\n            {this.props.options.showCloseButton && (\n              <div className=\"dialog-close\" onClick={this.props.onClose}>\n                <FontAwesomeIcon icon=\"times\" />\n              </div>\n            )}\n            {this.props.options.title}\n          </div>\n          <div className=\"dialog-content\">{this.props.children}</div>\n          {this.renderFooter()}\n        </div>\n      </div>\n    );\n  }\n\n  private renderFooter() {\n    if (\n      !this.props.options.showConfirmButton &&\n      !this.props.options.showCancelButton\n    ) {\n      return;\n    }\n\n    let cancelButton;\n    if (this.props.options.showCancelButton) {\n      cancelButton = (\n        <span\n          className=\"dialog-footer-button\"\n          onClick={this.props.options.onCancel}\n        >\n          Cancel\n        </span>\n      );\n    }\n\n    let confirmButton;\n    if (this.props.options.showConfirmButton) {\n      confirmButton = (\n        <span\n          className=\"dialog-footer-button\"\n          onClick={this.props.options.onConfirm}\n        >\n          Confirm\n        </span>\n      );\n    }\n\n    return (\n      <div className=\"dialog-footer\">\n        {cancelButton}\n        {confirmButton}\n      </div>\n    );\n  }\n}\n\nexport default Dialog;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as React from \"react\";\nimport {\n  DragDropContext,\n  Draggable,\n  Droppable,\n  DropResult\n} from \"react-beautiful-dnd\";\nimport IRun from \"src/models/Run\";\nimport ISegment from \"src/models/Segment\";\nimport \"./EditSplits.css\";\n\ninterface IEditSplitsProps {\n  onConfirm: (segments: IRun) => void;\n  run: IRun;\n}\n\ninterface IEditSplitsState {\n  category: string;\n  game: string;\n  segments: ISegment[];\n  selectedIndex?: number;\n}\n\nclass EditSplits extends React.Component<IEditSplitsProps, IEditSplitsState> {\n  private lastId: number = 0;\n\n  constructor(props: IEditSplitsProps) {\n    super(props);\n\n    const segments = props.run.segments.slice();\n    for (let i = 0; i < segments.length; i++) {\n      segments[i].id = \"split-\" + i;\n      this.lastId = i;\n    }\n    this.state = {\n      category: this.props.run.category,\n      game: this.props.run.game,\n      segments\n    };\n  }\n\n  public render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>\n              Game{\" \"}\n              <input\n                type=\"text\"\n                name=\"game\"\n                defaultValue={this.state.game}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              Category{\" \"}\n              <input\n                type=\"text\"\n                name=\"category\"\n                defaultValue={this.state.category}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n          <div>\n            <div>Splits</div>\n            <DragDropContext onDragEnd={this.onDragEnd}>\n              {this.makeDroppable()}\n            </DragDropContext>\n          </div>\n          <div className=\"editsplits-buttons\">\n            <span className=\"editsplits-buttons-button\" onClick={this.onRemove}>\n              Remove\n            </span>\n            <span className=\"editsplits-buttons-button\" onClick={this.onInsert}>\n              Insert\n            </span>\n            <input\n              className=\"editsplits-buttons-button\"\n              type=\"submit\"\n              value=\"Done\"\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    this.props.onConfirm({\n      category: this.state.category,\n      game: this.state.game,\n      segments: this.state.segments.slice()\n    });\n  };\n\n  private handleInputChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const target = event.currentTarget;\n    const name = target.name;\n    const value = target.value;\n\n    if (name === \"game\") {\n      this.setState({ game: value });\n    } else if (name === \"category\") {\n      this.setState({ category: value });\n    }\n  };\n\n  private onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const segments = this.state.segments.slice();\n    const [removed] = segments.splice(result.source.index, 1);\n    segments.splice(result.destination.index, 0, removed);\n\n    this.setState({ segments });\n\n    if (result.source.index === this.state.selectedIndex) {\n      this.setState({ selectedIndex: result.destination.index });\n    }\n  };\n\n  private onInsert = () => {\n    this.lastId++;\n    const segment: ISegment = {\n      id: \"split-\" + this.lastId,\n      title: \"\"\n    };\n\n    const segments = this.state.segments.slice();\n    if (!this.state.selectedIndex) {\n      segments.push(segment);\n    } else {\n      segments.splice(this.state.selectedIndex, 0, segment);\n    }\n\n    this.setState({ segments });\n  };\n\n  private onRemove = () => {\n    if (!this.state.selectedIndex) {\n      return;\n    }\n\n    const segments = this.state.segments.slice();\n    segments.splice(this.state.selectedIndex, 1);\n    this.setState({\n      segments,\n      selectedIndex: undefined\n    });\n  };\n\n  private makeDroppable = () => {\n    const draggables: JSX.Element[] = [];\n    for (let i = 0; i < this.state.segments.length; i++) {\n      const segmentId = this.state.segments[i].id;\n\n      let className = \"editsplits-split\";\n      if (this.state.selectedIndex === i) {\n        className += \" editsplits-split-selected\";\n      }\n\n      draggables.push(\n        <Draggable key={segmentId} draggableId={segmentId} index={i}>\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              className={className}\n              // tslint:disable-next-line:jsx-no-lambda\n              onClick={() => {\n                this.setState({ selectedIndex: i });\n              }}\n            >\n              <input\n                type=\"text\"\n                name={segmentId}\n                defaultValue={this.state.segments[i].title}\n              />\n              <div className=\"editsplits-split-sort\">\n                <FontAwesomeIcon icon=\"sort\" />\n              </div>\n            </div>\n          )}\n        </Draggable>\n      );\n    }\n\n    return (\n      <Droppable droppableId=\"editSplitsDroppable\">\n        {(provided, snapshot) => (\n          <div ref={provided.innerRef}>\n            {draggables}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    );\n  };\n}\n\nexport default EditSplits;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as React from \"react\";\nimport \"./Menu.css\";\n\ninterface IMenuProps {\n  closeCallback: () => void;\n  isOpen: boolean;\n}\n\nclass Menu extends React.Component<IMenuProps> {\n  public render() {\n    const sidenavClass = this.props.isOpen\n      ? \"sidenav sidenav-active\"\n      : \"sidenav sidenav-inactive\";\n    return (\n      <div>\n        {this.props.isOpen && <div className=\"sidenav-background\" />}\n        <div className={sidenavClass}>\n          <div className=\"sidenav-close\" onClick={this.props.closeCallback}>\n            <FontAwesomeIcon icon=\"times\" />\n          </div>\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Menu;\n","/**\n * Converts milliseconds to a string.\n * Only shows milliseconds when the time is less than a minute.\n *\n * @param {number} milliseconds Time to convert.\n * @param {boolean} showMilliseconds Show milliseconds when time is less than a minute.\n * @returns String containing the time e.g. 1:23:40\n */\nexport function millisecondsToString(\n  milliseconds: number,\n  showMilliseconds: boolean = true\n) {\n  let str = \"\";\n  let seconds = Math.floor(milliseconds / 1000);\n  let minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  milliseconds = Math.round((milliseconds % 1000) / 10);\n  minutes %= 60;\n  seconds %= 60;\n\n  // Only show milliseconds when hours and minutes are 0\n  if (showMilliseconds && hours === 0 && minutes === 0) {\n    str += seconds + \".\";\n    if (milliseconds < 10) {\n      str += \"0\";\n    }\n    str += milliseconds;\n  } else {\n    let hasHours = false;\n    if (hours > 0) {\n      hasHours = true;\n      str += hours + \":\";\n    }\n    if (minutes > 0) {\n      if (minutes < 10 && hasHours) {\n        str += \"0\";\n      }\n      str += minutes + \":\";\n    } else if (hasHours) {\n      str += \"00:\";\n    } else {\n      str += \"0:\";\n    }\n\n    if (seconds < 10) {\n      str += \"0\";\n    }\n    str += seconds;\n  }\n\n  return str;\n}\n","import * as React from \"react\";\nimport Constants from \"./Constants\";\nimport ISegment from \"./models/Segment\";\nimport \"./Split.css\";\nimport { millisecondsToString } from \"./TimeUtils\";\n\ninterface ISplitProps {\n  segment: ISegment;\n  currentTime: number;\n  isCurrentSplit: boolean;\n  segmentTime?: number;\n}\n\n/**\n * Component that displays a split.\n *\n * @class Split\n * @extends {React.Component<ISplitProps>}\n */\nclass Split extends React.Component<ISplitProps> {\n  public render() {\n    let time: string = \"-\";\n    if (this.props.segmentTime === Constants.SKIPPED) {\n      time = \"-\";\n    } else if (this.props.segmentTime) {\n      if (this.props.segment.pbTime) {\n        // Display the delta if there is a time for this segment in the user's PB\n        const delta = this.props.segmentTime - this.props.segment.pbTime;\n        time =\n          (delta > 0 ? \"+\" : \"-\") +\n          millisecondsToString(Math.abs(delta), false);\n      } else {\n        time = millisecondsToString(this.props.segmentTime, false);\n      }\n    } else if (this.props.segment.pbTime) {\n      if (\n        this.props.isCurrentSplit &&\n        this.props.currentTime > this.props.segment.pbTime\n      ) {\n        // Display current time loss if this is the current split and the user is losing time\n        const delta = this.props.currentTime - this.props.segment.pbTime;\n        time = \"+\" + millisecondsToString(delta, false);\n      } else {\n        time = millisecondsToString(this.props.segment.pbTime, false);\n      }\n    }\n\n    let divClass = \"split\";\n    if (this.props.isCurrentSplit) {\n      divClass += \" split-active\";\n    }\n\n    return (\n      <div className={divClass}>\n        <span className=\"split-title\">{this.props.segment.title}</span>\n        <span className=\"split-time\">{time}</span>\n      </div>\n    );\n  }\n}\n\nexport default Split;\n","import * as React from \"react\";\nimport \"./Timer.css\";\nimport { millisecondsToString } from \"./TimeUtils\";\n\ninterface ITimerProps {\n  time: number;\n}\n\nclass Timer extends React.Component<ITimerProps> {\n  public render() {\n    const milliseconds = Math.floor((this.props.time % 1000) / 10);\n    let msString = \".\";\n    if (milliseconds < 10) {\n      msString += \"0\";\n    }\n    msString += milliseconds;\n\n    return (\n      <div className=\"timer\">\n        <span>{millisecondsToString(this.props.time, false)}</span>\n        <span className=\"timer-decimal\">{msString}</span>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faBars, faSort, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport * as React from \"react\";\nimport \"./App.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Constants from \"./Constants\";\nimport Dialog from \"./dialog/Dialog\";\nimport { DialogType } from \"./dialog/DialogOptions\";\nimport EditSplits from \"./dialogs/EditSplits\";\nimport Menu from \"./menu/Menu\";\nimport IDialogData from \"./models/DialogData\";\nimport IRun from \"./models/Run\";\nimport Split from \"./Split\";\nimport Timer from \"./Timer\";\n\nlibrary.add(faBars, faSort, faTimes);\n\ninterface IAppState {\n  currentTime: number;\n  currentSplit: number;\n  dialog: IDialogData;\n  history: IHistory[];\n  isPaused: boolean;\n  isTiming: boolean;\n  run: IRun;\n  showDialog: boolean;\n  showMenu: boolean;\n  startTime: number;\n}\n\ninterface IHistory {\n  segmentTimes: number[];\n}\n\nclass App extends React.Component<{}, IAppState> {\n  private interval: number;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      currentSplit: 0,\n      currentTime: 0,\n      dialog: {\n        options: {\n          showCloseButton: true,\n          title: \"\",\n          type: DialogType.Modal\n        }\n      },\n      history: [{ segmentTimes: [] }],\n      isPaused: false,\n      isTiming: false,\n      run: {\n        category: \"Any%\",\n        game: \"Super Metroid\",\n        segments: [\n          { id: \"\", title: \"0\", pbTime: 5000 },\n          { id: \"\", title: \"1\" },\n          { id: \"\", title: \"2\", pbTime: 15000 },\n          { id: \"\", title: \"3\", pbTime: 20000 },\n          { id: \"\", title: \"4\", pbTime: 25000 },\n          { id: \"\", title: \"5\", pbTime: 30000 },\n          { id: \"\", title: \"6\", pbTime: 35000 },\n          { id: \"\", title: \"7\", pbTime: 40000 },\n          { id: \"\", title: \"8\", pbTime: 45000 },\n          { id: \"\", title: \"9\", pbTime: 50000 },\n          { id: \"\", title: \"10\", pbTime: 55000 },\n          { id: \"\", title: \"11\", pbTime: 60000 },\n          { id: \"\", title: \"12\", pbTime: 65000 },\n          { id: \"\", title: \"13\", pbTime: 70000 }\n        ]\n      },\n      showDialog: false,\n      showMenu: false,\n      startTime: Date.now()\n    };\n  }\n\n  public componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  public render() {\n    let clickAction = this.startTimer;\n    if (this.state.isTiming) {\n      clickAction = this.splitTimer;\n    }\n\n    let lastControlText = \"Start\";\n    let lastControlAction = this.startTimer;\n    if (this.state.isTiming) {\n      if (this.state.isPaused) {\n        lastControlText = \"Resume\";\n        lastControlAction = this.resumeTimer;\n      } else {\n        lastControlText = \"Pause\";\n        lastControlAction = this.pauseTimer;\n      }\n    }\n\n    const splits: JSX.Element[] = [];\n    for (let i = 0; i < this.state.run.segments.length; i++) {\n      splits.push(\n        <Split\n          key={i}\n          segment={this.state.run.segments[i]}\n          currentTime={this.state.currentTime}\n          isCurrentSplit={this.state.isTiming && this.state.currentSplit === i}\n          segmentTime={\n            this.state.history[this.state.currentSplit].segmentTimes[i]\n          }\n        />\n      );\n    }\n\n    let title: JSX.Element;\n    if (this.state.run.game === \"\" && this.state.run.category === \"\") {\n      title = <div className=\"title title-large\">NanoSplit</div>;\n    } else if (this.state.run.game === \"\") {\n      title = (\n        <div className=\"title title-large\">{this.state.run.category}</div>\n      );\n    } else if (this.state.run.category === \"\") {\n      title = <div className=\"title title-large\">{this.state.run.game}</div>;\n    } else {\n      title = (\n        <div className=\"title\">\n          {this.state.run.game}\n          <br />\n          {this.state.run.category}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <div id=\"controls\" className=\"controls\">\n          <button className=\"controls-button ml-0\" onClick={this.undoSegment}>\n            Undo\n          </button>\n          <button className=\"controls-button\" onClick={this.skipSegment}>\n            Skip\n          </button>\n          <button className=\"controls-button\" onClick={this.resetTimer}>\n            Reset\n          </button>\n          <button className=\"controls-button mr-0\" onClick={lastControlAction}>\n            {lastControlText}\n          </button>\n        </div>\n        <div className=\"header\">\n          <div className=\"title-bar\">\n            <div className=\"sidenav-menu\" onClick={this.openMenu}>\n              <FontAwesomeIcon icon=\"bars\" />\n            </div>\n            {title}\n          </div>\n          <div onClick={clickAction}>\n            <Timer time={this.state.currentTime} />\n          </div>\n        </div>\n        <div className=\"splits\" id=\"splits\" onClick={clickAction}>\n          {splits}\n        </div>\n        <Menu isOpen={this.state.showMenu} closeCallback={this.closeMenu}>\n          <div className=\"sidenav-item\" onClick={this.openNewSplits}>\n            New splits\n          </div>\n          <div className=\"sidenav-item\" onClick={this.openEditSplits}>\n            Edit splits\n          </div>\n          <div className=\"sidenav-item\">Import</div>\n          <div className=\"sidenav-item\">Export</div>\n          <div className=\"sidenav-item\">Settings</div>\n        </Menu>\n        <Dialog\n          isOpen={this.state.showDialog}\n          onClose={this.closeDialog}\n          options={this.state.dialog.options}\n        >\n          {this.state.dialog.contents}\n        </Dialog>\n      </div>\n    );\n  }\n\n  private startTimer = () => {\n    clearInterval(this.interval);\n    this.setState({\n      currentSplit: 0,\n      history: [{ segmentTimes: [] }],\n      isPaused: false,\n      isTiming: true,\n      startTime: Date.now()\n    });\n    this.createInterval();\n\n    this.scrollToSplit(0);\n  };\n\n  private splitTimer = () => {\n    if (this.state.isPaused || !this.state.isTiming) {\n      return;\n    }\n\n    let currentSplit = this.state.currentSplit;\n    this.setSegmentTime(this.state.currentTime);\n\n    // Stop the timer if this was the last split\n    if (this.state.currentSplit >= this.state.run.segments.length - 1) {\n      clearInterval(this.interval);\n      this.setState({\n        isTiming: false\n      });\n    } else {\n      currentSplit += 1;\n      this.setState({ currentSplit });\n    }\n\n    this.scrollToSplit(currentSplit);\n  };\n\n  private pauseTimer = () => {\n    clearInterval(this.interval);\n    this.setState({\n      isPaused: true\n    });\n  };\n\n  private resumeTimer = () => {\n    const now = Date.now();\n    this.setState({\n      isPaused: false,\n      startTime: now - this.state.currentTime\n    });\n    this.createInterval();\n  };\n\n  private resetTimer = () => {\n    clearInterval(this.interval);\n    this.setState({\n      currentSplit: 0,\n      currentTime: 0,\n      history: [{ segmentTimes: [] }],\n      isTiming: false\n    });\n  };\n\n  private undoSegment = () => {\n    if (this.state.currentSplit === 0 || !this.state.isTiming) {\n      return;\n    }\n\n    this.setState({\n      currentSplit: this.state.currentSplit - 1,\n      history: this.state.history.slice(0, this.state.currentSplit)\n    });\n  };\n\n  private skipSegment = () => {\n    if (!this.state.isTiming) {\n      return;\n    }\n\n    this.setSegmentTime(Constants.SKIPPED);\n\n    this.setState({\n      currentSplit: this.state.currentSplit + 1\n    });\n  };\n\n  private createInterval = () => {\n    this.interval = setInterval(() => {\n      this.setState({\n        currentTime: Date.now() - this.state.startTime\n      });\n    });\n  };\n\n  private setSegmentTime = (time: number) => {\n    const currentSplit = this.state.currentSplit;\n    const segmentTimes = this.state.history[currentSplit].segmentTimes.concat([\n      time\n    ]);\n    this.setState({\n      history: this.state.history.concat([{ segmentTimes }])\n    });\n  };\n\n  private scrollToSplit = (currentSplit: number) => {\n    if (document.documentElement === null) {\n      return;\n    }\n    const windowHeight = document.documentElement.clientHeight;\n    const controls = document.getElementById(\"controls\");\n    const splits = document.getElementById(\"splits\");\n    if (controls && splits) {\n      const controlsHeight = controls.getBoundingClientRect().height;\n      const splitsHeight = splits.getBoundingClientRect().height;\n      const numOfSplits = this.state.run.segments.length;\n      const bottom =\n        Constants.SPLITS_MARGIN +\n        splitsHeight -\n        (numOfSplits - currentSplit - 1) * Constants.SPLIT_HEIGHT;\n      const target = bottom - windowHeight + controlsHeight;\n      window.scrollTo({\n        behavior: \"smooth\",\n        left: 0,\n        top: target\n      });\n    }\n  };\n\n  private newSplits = () => {\n    const run: IRun = {\n      category: \"\",\n      game: \"\",\n      segments: []\n    };\n    this.setState({ run, showDialog: false, showMenu: false });\n  };\n\n  private openNewSplits = () => {\n    this.setState({\n      dialog: {\n        contents: (\n          <div>\n            Are you sure you want to create new splits? Your previous splits\n            will be erased.\n          </div>\n        ),\n        options: {\n          onCancel: this.closeDialog,\n          onConfirm: this.newSplits,\n          showCancelButton: true,\n          showCloseButton: false,\n          showConfirmButton: true,\n          title: \"Create new splits\",\n          type: DialogType.Modal\n        }\n      },\n      showDialog: true,\n      showMenu: false\n    });\n  };\n\n  private openEditSplits = () => {\n    this.setState({\n      dialog: {\n        contents: (\n          <EditSplits run={this.state.run} onConfirm={this.confirmEditSplits} />\n        ),\n        options: {\n          showCloseButton: true,\n          title: \"Edit splits\",\n          type: DialogType.Fullscreen\n        }\n      },\n      showDialog: true,\n      showMenu: false\n    });\n  };\n\n  private confirmEditSplits = (run: IRun) => {\n    this.setState({ run });\n    this.closeDialog();\n  };\n\n  private closeDialog = () => {\n    this.setState({ showDialog: false });\n    window.setTimeout(() => {\n      this.setState({\n        dialog: {\n          options: {\n            showCloseButton: true,\n            title: \"\",\n            type: DialogType.Modal\n          }\n        }\n      });\n    }, Constants.DIALOG_CLOSE_TIME_IN_MS);\n  };\n\n  private openMenu = () => {\n    this.setState({ showMenu: true });\n  };\n\n  private closeMenu = () => {\n    this.setState({ showMenu: false });\n  };\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}