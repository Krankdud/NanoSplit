{"version":3,"sources":["dialog/DialogOptions.ts","Constants.ts","dialog/Dialog.tsx","dialogs/EditSplits.tsx","livesplit/Parser.ts","dialogs/ImportForm.tsx","menu/Menu.tsx","TimeUtils.ts","Split.tsx","Timer.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["DialogType","src_Constants","Constants","DIALOG_CLOSE_TIME_IN_MS","SKIPPED","SPLITS_MARGIN","SPLIT_HEIGHT","src_dialog_Dialog","_super","Dialog","_this","apply","this","arguments","lastDialogType","Modal","tslib_es6","prototype","render","props","isOpen","options","type","dialogClass","transitionClass","react","className","showCloseButton","onClick","onClose","react_fontawesome_index_es","icon","title","children","renderFooter","cancelButton","confirmButton","showConfirmButton","showCancelButton","onCancel","onConfirm","src_dialogs_EditSplits","EditSplits","call","lastId","handleSubmit","event","preventDefault","category","state","game","segments","slice","handleInputChange","target","currentTarget","name","value","setState","forEach","segment","id","onDragEnd","result","destination","removed","splice","source","index","selectedIndex","onInsert","push","onRemove","undefined","makeDroppable","draggables","i","segmentId","react_beautiful_dnd_esm","key","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","defaultValue","onChange","length","droppableId","placeholder","run","onSubmit","Parser","text","xml","DOMParser","parseFromString","documentElement","nodeName","Error","childNodes","nodeValue","root","getElementsByTagName","offset","Array","from","split","realTime","bestSegment","bestSegmentTime","splitTimes","src_dialogs_ImportForm","ImportForm","fileInput","current","files","fileReader_1","FileReader","readAsText","onload","e","liveSplitRun","run_1","bestTime","convertLiveSplitTimeToMS","pbTime","onImport","error","errorOcurred","onloadend","time","splittedTime","hours","parseInt","minutes","splittedSeconds","seconds","href","accept","src_menu_Menu","Menu","sidenavClass","closeCallback","millisecondsToString","milliseconds","showMilliseconds","str","Math","floor","round","hasHours","src_Split_0","Split","segmentTime","delta","abs","isCurrentSplit","currentTime","divClass","src_Timer_0","Timer","msString","index_es","add","free_solid_svg_icons_index_es","src_App_0","App","startTimer","clearInterval","interval","currentSplit","history","segmentTimes","isPaused","isTiming","startTime","Date","now","createInterval","scrollToSplit","splitTimer","setSegmentTime","pauseTimer","resumeTimer","resetTimer","undoSegment","skipSegment","setInterval","concat","document","windowHeight","clientHeight","controls","getElementById","splits","controlsHeight","getBoundingClientRect","height","splitsHeight","numOfSplits","window","scrollTo","behavior","left","top","newSplits","closeDialog","openNewSplits","dialog","contents","showDialog","showMenu","openEditSplits","confirmEditSplits","Fullscreen","openImport","setTimeout","openMenu","closeMenu","componentWillUnmount","clickAction","lastControlText","lastControlAction","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","react_dom","URL","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4a9c8a8f.chunk.js","sourcesContent":["export enum DialogType {\n  Modal,\n  Fullscreen\n}\n\ninterface IDialogOptions {\n  onCancel?: () => void;\n  onConfirm?: () => void;\n  showCancelButton?: boolean;\n  showCloseButton?: boolean;\n  showConfirmButton?: boolean;\n  title?: string;\n  type: DialogType;\n}\n\nexport default IDialogOptions;\n","class Constants {\n  public static readonly DIALOG_CLOSE_TIME_IN_MS: number = 250; // This should be a little bit more than the transition time for the dialogs\n  public static readonly SKIPPED: number = -1;\n  public static readonly SPLITS_MARGIN: number = 156;\n  public static readonly SPLIT_HEIGHT: number = 34;\n}\n\nexport default Constants;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as React from \"react\";\nimport \"./Dialog.css\";\nimport IDialogOptions, { DialogType } from \"./DialogOptions\";\n\ninterface IDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  options: IDialogOptions;\n}\n\nclass Dialog extends React.Component<IDialogProps> {\n  private lastDialogType: DialogType = DialogType.Modal;\n\n  public render() {\n    if (this.props.isOpen) {\n      this.lastDialogType = this.props.options.type;\n    }\n\n    const dialogClass =\n      this.lastDialogType === DialogType.Modal ? \"dialog\" : \"dialog-fullscreen\";\n    const transitionClass = this.props.isOpen\n      ? \"dialog-transition-active\"\n      : \"dialog-transition-inactive\";\n\n    return (\n      <div className={transitionClass}>\n        {this.props.options.type === DialogType.Modal && this.props.isOpen && (\n          <div className=\"dialog-background\" />\n        )}\n        <div className={dialogClass}>\n          <div className=\"dialog-header\">\n            {this.props.options.showCloseButton && (\n              <div className=\"dialog-close\" onClick={this.props.onClose}>\n                <FontAwesomeIcon icon=\"times\" />\n              </div>\n            )}\n            {this.props.options.title}\n          </div>\n          <div className=\"dialog-content\">{this.props.children}</div>\n          {this.renderFooter()}\n        </div>\n      </div>\n    );\n  }\n\n  private renderFooter() {\n    if (\n      !this.props.options.showConfirmButton &&\n      !this.props.options.showCancelButton\n    ) {\n      return;\n    }\n\n    let cancelButton;\n    if (this.props.options.showCancelButton) {\n      cancelButton = (\n        <span\n          className=\"dialog-footer-button\"\n          onClick={this.props.options.onCancel}\n        >\n          Cancel\n        </span>\n      );\n    }\n\n    let confirmButton;\n    if (this.props.options.showConfirmButton) {\n      confirmButton = (\n        <span\n          className=\"dialog-footer-button\"\n          onClick={this.props.options.onConfirm}\n        >\n          Confirm\n        </span>\n      );\n    }\n\n    return (\n      <div className=\"dialog-footer\">\n        {cancelButton}\n        {confirmButton}\n      </div>\n    );\n  }\n}\n\nexport default Dialog;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as React from \"react\";\nimport {\n  DragDropContext,\n  Draggable,\n  Droppable,\n  DropResult\n} from \"react-beautiful-dnd\";\nimport IRun from \"src/models/Run\";\nimport ISegment from \"src/models/Segment\";\nimport \"./EditSplits.css\";\n\ninterface IEditSplitsProps {\n  onConfirm: (segments: IRun) => void;\n  run: IRun;\n}\n\ninterface IEditSplitsState {\n  category: string;\n  game: string;\n  segments: ISegment[];\n  selectedIndex?: number;\n}\n\nclass EditSplits extends React.Component<IEditSplitsProps, IEditSplitsState> {\n  private lastId: number = 0;\n\n  constructor(props: IEditSplitsProps) {\n    super(props);\n\n    const segments = props.run.segments.slice();\n    for (let i = 0; i < segments.length; i++) {\n      segments[i].id = \"split-\" + i;\n      this.lastId = i;\n    }\n    this.state = {\n      category: this.props.run.category,\n      game: this.props.run.game,\n      segments\n    };\n  }\n\n  public render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>\n              Game{\" \"}\n              <input\n                type=\"text\"\n                name=\"game\"\n                defaultValue={this.state.game}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              Category{\" \"}\n              <input\n                type=\"text\"\n                name=\"category\"\n                defaultValue={this.state.category}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          </div>\n          <div>\n            <div>Splits</div>\n            <DragDropContext onDragEnd={this.onDragEnd}>\n              {this.makeDroppable()}\n            </DragDropContext>\n          </div>\n          <div className=\"editsplits-buttons\">\n            <span className=\"editsplits-buttons-button\" onClick={this.onRemove}>\n              Remove\n            </span>\n            <span className=\"editsplits-buttons-button\" onClick={this.onInsert}>\n              Insert\n            </span>\n            <input\n              className=\"editsplits-buttons-button\"\n              type=\"submit\"\n              value=\"Done\"\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  private handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    this.props.onConfirm({\n      category: this.state.category,\n      game: this.state.game,\n      segments: this.state.segments.slice()\n    });\n  };\n\n  private handleInputChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const target = event.currentTarget;\n    const name = target.name;\n    const value = target.value;\n\n    if (name === \"game\") {\n      this.setState({ game: value });\n    } else if (name === \"category\") {\n      this.setState({ category: value });\n    } else {\n      this.state.segments.forEach(segment => {\n        if (segment.id === name) {\n          segment.title = value;\n        }\n      });\n    }\n  };\n\n  private onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const segments = this.state.segments.slice();\n    const [removed] = segments.splice(result.source.index, 1);\n    segments.splice(result.destination.index, 0, removed);\n\n    this.setState({ segments });\n\n    if (result.source.index === this.state.selectedIndex) {\n      this.setState({ selectedIndex: result.destination.index });\n    }\n  };\n\n  private onInsert = () => {\n    this.lastId++;\n    const segment: ISegment = {\n      id: \"split-\" + this.lastId,\n      title: \"\"\n    };\n\n    const segments = this.state.segments.slice();\n    if (!this.state.selectedIndex) {\n      segments.push(segment);\n    } else {\n      segments.splice(this.state.selectedIndex, 0, segment);\n    }\n\n    this.setState({ segments });\n  };\n\n  private onRemove = () => {\n    if (!this.state.selectedIndex) {\n      return;\n    }\n\n    const segments = this.state.segments.slice();\n    segments.splice(this.state.selectedIndex, 1);\n    this.setState({\n      segments,\n      selectedIndex: undefined\n    });\n  };\n\n  private makeDroppable = () => {\n    const draggables: JSX.Element[] = [];\n    for (let i = 0; i < this.state.segments.length; i++) {\n      const segmentId = this.state.segments[i].id;\n\n      let className = \"editsplits-split\";\n      if (this.state.selectedIndex === i) {\n        className += \" editsplits-split-selected\";\n      }\n\n      draggables.push(\n        <Draggable key={segmentId} draggableId={segmentId} index={i}>\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              className={className}\n              // tslint:disable-next-line:jsx-no-lambda\n              onClick={() => {\n                this.setState({ selectedIndex: i });\n              }}\n            >\n              <input\n                type=\"text\"\n                name={segmentId}\n                defaultValue={this.state.segments[i].title}\n                onChange={this.handleInputChange}\n              />\n              <div className=\"editsplits-split-sort\">\n                <FontAwesomeIcon icon=\"sort\" />\n              </div>\n            </div>\n          )}\n        </Draggable>\n      );\n    }\n\n    return (\n      <Droppable droppableId=\"editSplitsDroppable\">\n        {(provided, snapshot) => (\n          <div ref={provided.innerRef}>\n            {draggables}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    );\n  };\n}\n\nexport default EditSplits;\n","function parseLiveSplit(text: string): ILiveSplitRun {\n  const parser = new DOMParser();\n  const xml = parser.parseFromString(text, \"application/xml\");\n  if (xml.documentElement && xml.documentElement.nodeName === \"parseerror\") {\n    throw Error(\n      xml.documentElement.childNodes[0].nodeValue || \"Error parsing XML\"\n    );\n  }\n  const root = xml.getElementsByTagName(\"Run\")[0];\n  const game = root.getElementsByTagName(\"GameName\")[0].childNodes[0].nodeValue;\n  const category = root.getElementsByTagName(\"CategoryName\")[0].childNodes[0]\n    .nodeValue;\n  const offset = root.getElementsByTagName(\"Offset\")[0].childNodes[0].nodeValue;\n\n  // Segments\n  const segments: ILiveSplitSegment[] = [];\n  const xmlSegments = Array.from(\n    root.getElementsByTagName(\"Segments\")[0].children\n  );\n  xmlSegments.forEach(segment => {\n    const name = segment.getElementsByTagName(\"Name\")[0].childNodes[0]\n      .nodeValue;\n    const split: ILiveSplitSplit = {\n      realTime: segment\n        .getElementsByTagName(\"SplitTimes\")[0]\n        .getElementsByTagName(\"RealTime\")[0].childNodes[0].nodeValue\n    };\n    const bestSegment: ILiveSplitSplit = {\n      realTime: segment\n        .getElementsByTagName(\"BestSegmentTime\")[0]\n        .getElementsByTagName(\"RealTime\")[0].childNodes[0].nodeValue\n    };\n    segments.push({\n      bestSegmentTime: bestSegment,\n      name,\n      splitTimes: [split]\n    });\n  });\n\n  return {\n    category,\n    game,\n    offset,\n    segments\n  };\n}\n\nexport default parseLiveSplit;\n","import * as React from \"react\";\nimport parseLiveSplit from \"../livesplit/Parser\";\nimport IRun from \"../models/Run\";\nimport \"./ImportForm.css\";\n\ninterface IImportFormProps {\n  onImport: (run: IRun) => void;\n}\n\ninterface IImportFormState {\n  errorOcurred: boolean;\n}\n\nclass ImportForm extends React.Component<IImportFormProps, IImportFormState> {\n  private fileInput: React.RefObject<HTMLInputElement>;\n\n  constructor(props: IImportFormProps) {\n    super(props);\n    this.state = {\n      errorOcurred: false\n    };\n    this.fileInput = React.createRef<HTMLInputElement>();\n  }\n\n  public render() {\n    return (\n      <div>\n        {this.state.errorOcurred && (\n          <div className=\"import-error\">\n            An error occurred while reading the file. Please try again.\n          </div>\n        )}\n        <div className=\"import-description\">\n          Import splits from <a href=\"https://www.livesplit.org\">LiveSplit</a>\n        </div>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"file\" accept=\".lss\" ref={this.fileInput} />\n          <input type=\"submit\" value=\"Import\" />\n        </form>\n      </div>\n    );\n  }\n\n  private handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (this.fileInput.current && this.fileInput.current.files) {\n      const fileReader = new FileReader();\n      fileReader.readAsText(this.fileInput.current.files[0]);\n\n      fileReader.onload = (e: ProgressEvent) => {\n        const result = fileReader.result;\n        if (typeof result === \"string\") {\n          try {\n            const liveSplitRun = parseLiveSplit(result);\n            const run: IRun = {\n              category: liveSplitRun.category || \"\",\n              game: liveSplitRun.game || \"\",\n              segments: []\n            };\n            liveSplitRun.segments.forEach(segment => {\n              run.segments.push({\n                bestTime: this.convertLiveSplitTimeToMS(\n                  segment.bestSegmentTime.realTime\n                ),\n                id: \"\",\n                pbTime: this.convertLiveSplitTimeToMS(\n                  segment.splitTimes[0].realTime\n                ),\n                title: segment.name || \"\"\n              });\n            });\n            this.props.onImport(run);\n          } catch (error) {\n            this.setState({ errorOcurred: true });\n          }\n        }\n      };\n\n      fileReader.onloadend = (e: ProgressEvent) => {\n        if (fileReader.error) {\n          this.setState({ errorOcurred: true });\n        }\n      };\n    }\n  };\n\n  private convertLiveSplitTimeToMS = (time: string | null) => {\n    if (!time) {\n      return -1;\n    }\n    const splittedTime = time.split(\":\");\n    const hours = parseInt(splittedTime[0], 10);\n    const minutes = parseInt(splittedTime[1], 10);\n    const splittedSeconds = splittedTime[2].split(\".\");\n    const seconds = parseInt(splittedSeconds[0], 10);\n    const milliseconds = parseInt(splittedSeconds[0].slice(0, 3), 10);\n    return (\n      milliseconds +\n      seconds * 1000 +\n      minutes * 60 * 1000 +\n      hours * 60 * 60 * 1000\n    );\n  };\n}\n\nexport default ImportForm;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as React from \"react\";\nimport \"./Menu.css\";\n\ninterface IMenuProps {\n  closeCallback: () => void;\n  isOpen: boolean;\n}\n\nclass Menu extends React.Component<IMenuProps> {\n  public render() {\n    const sidenavClass = this.props.isOpen\n      ? \"sidenav sidenav-active\"\n      : \"sidenav sidenav-inactive\";\n    return (\n      <div>\n        {this.props.isOpen && <div className=\"sidenav-background\" />}\n        <div className={sidenavClass}>\n          <div className=\"sidenav-close\" onClick={this.props.closeCallback}>\n            <FontAwesomeIcon icon=\"times\" />\n          </div>\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Menu;\n","/**\n * Converts milliseconds to a string.\n * Only shows milliseconds when the time is less than a minute.\n *\n * @param {number} milliseconds Time to convert.\n * @param {boolean} showMilliseconds Show milliseconds when time is less than a minute.\n * @returns String containing the time e.g. 1:23:40\n */\nexport function millisecondsToString(\n  milliseconds: number,\n  showMilliseconds: boolean = true\n) {\n  let str = \"\";\n  let seconds = Math.floor(milliseconds / 1000);\n  let minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  milliseconds = Math.round((milliseconds % 1000) / 10);\n  minutes %= 60;\n  seconds %= 60;\n\n  // Only show milliseconds when hours and minutes are 0\n  if (showMilliseconds && hours === 0 && minutes === 0) {\n    str += seconds + \".\";\n    if (milliseconds < 10) {\n      str += \"0\";\n    }\n    str += milliseconds;\n  } else {\n    let hasHours = false;\n    if (hours > 0) {\n      hasHours = true;\n      str += hours + \":\";\n    }\n    if (minutes > 0) {\n      if (minutes < 10 && hasHours) {\n        str += \"0\";\n      }\n      str += minutes + \":\";\n    } else if (hasHours) {\n      str += \"00:\";\n    } else {\n      str += \"0:\";\n    }\n\n    if (seconds < 10) {\n      str += \"0\";\n    }\n    str += seconds;\n  }\n\n  return str;\n}\n","import * as React from \"react\";\nimport Constants from \"./Constants\";\nimport ISegment from \"./models/Segment\";\nimport \"./Split.css\";\nimport { millisecondsToString } from \"./TimeUtils\";\n\ninterface ISplitProps {\n  segment: ISegment;\n  currentTime: number;\n  isCurrentSplit: boolean;\n  segmentTime?: number;\n}\n\n/**\n * Component that displays a split.\n *\n * @class Split\n * @extends {React.Component<ISplitProps>}\n */\nclass Split extends React.Component<ISplitProps> {\n  public render() {\n    let time: string = \"-\";\n    if (this.props.segmentTime === Constants.SKIPPED) {\n      time = \"-\";\n    } else if (this.props.segmentTime) {\n      if (this.props.segment.pbTime) {\n        // Display the delta if there is a time for this segment in the user's PB\n        const delta = this.props.segmentTime - this.props.segment.pbTime;\n        time =\n          (delta > 0 ? \"+\" : \"-\") +\n          millisecondsToString(Math.abs(delta), false);\n      } else {\n        time = millisecondsToString(this.props.segmentTime, false);\n      }\n    } else if (this.props.segment.pbTime) {\n      if (\n        this.props.isCurrentSplit &&\n        this.props.currentTime > this.props.segment.pbTime\n      ) {\n        // Display current time loss if this is the current split and the user is losing time\n        const delta = this.props.currentTime - this.props.segment.pbTime;\n        time = \"+\" + millisecondsToString(delta, false);\n      } else {\n        time = millisecondsToString(this.props.segment.pbTime, false);\n      }\n    }\n\n    let divClass = \"split\";\n    if (this.props.isCurrentSplit) {\n      divClass += \" split-active\";\n    }\n\n    return (\n      <div className={divClass}>\n        <span className=\"split-title\">{this.props.segment.title}</span>\n        <span className=\"split-time\">{time}</span>\n      </div>\n    );\n  }\n}\n\nexport default Split;\n","import * as React from \"react\";\nimport \"./Timer.css\";\nimport { millisecondsToString } from \"./TimeUtils\";\n\ninterface ITimerProps {\n  time: number;\n}\n\nclass Timer extends React.Component<ITimerProps> {\n  public render() {\n    const milliseconds = Math.floor((this.props.time % 1000) / 10);\n    let msString = \".\";\n    if (milliseconds < 10) {\n      msString += \"0\";\n    }\n    msString += milliseconds;\n\n    return (\n      <div className=\"timer\">\n        <span>{millisecondsToString(this.props.time, false)}</span>\n        <span className=\"timer-decimal\">{msString}</span>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faBars, faSort, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport * as React from \"react\";\nimport \"./App.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Constants from \"./Constants\";\nimport Dialog from \"./dialog/Dialog\";\nimport { DialogType } from \"./dialog/DialogOptions\";\nimport EditSplits from \"./dialogs/EditSplits\";\nimport ImportForm from \"./dialogs/ImportForm\";\nimport Menu from \"./menu/Menu\";\nimport IDialogData from \"./models/DialogData\";\nimport IRun from \"./models/Run\";\nimport Split from \"./Split\";\nimport Timer from \"./Timer\";\n\nlibrary.add(faBars, faSort, faTimes);\n\ninterface IAppState {\n  currentTime: number;\n  currentSplit: number;\n  dialog: IDialogData;\n  history: IHistory[];\n  isPaused: boolean;\n  isTiming: boolean;\n  run: IRun;\n  showDialog: boolean;\n  showMenu: boolean;\n  startTime: number;\n}\n\ninterface IHistory {\n  segmentTimes: number[];\n}\n\nclass App extends React.Component<{}, IAppState> {\n  private interval: number;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      currentSplit: 0,\n      currentTime: 0,\n      dialog: {\n        options: {\n          showCloseButton: true,\n          title: \"\",\n          type: DialogType.Modal\n        }\n      },\n      history: [{ segmentTimes: [] }],\n      isPaused: false,\n      isTiming: false,\n      run: {\n        category: \"\",\n        game: \"\",\n        segments: []\n      },\n      showDialog: false,\n      showMenu: false,\n      startTime: Date.now()\n    };\n  }\n\n  public componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  public render() {\n    let clickAction = this.startTimer;\n    if (this.state.isTiming) {\n      clickAction = this.splitTimer;\n    }\n\n    let lastControlText = \"Start\";\n    let lastControlAction = this.startTimer;\n    if (this.state.isTiming) {\n      if (this.state.isPaused) {\n        lastControlText = \"Resume\";\n        lastControlAction = this.resumeTimer;\n      } else {\n        lastControlText = \"Pause\";\n        lastControlAction = this.pauseTimer;\n      }\n    }\n\n    const splits: JSX.Element[] = [];\n    for (let i = 0; i < this.state.run.segments.length; i++) {\n      splits.push(\n        <Split\n          key={i}\n          segment={this.state.run.segments[i]}\n          currentTime={this.state.currentTime}\n          isCurrentSplit={this.state.isTiming && this.state.currentSplit === i}\n          segmentTime={\n            this.state.history[this.state.currentSplit].segmentTimes[i]\n          }\n        />\n      );\n    }\n\n    let title: JSX.Element;\n    if (this.state.run.game === \"\" && this.state.run.category === \"\") {\n      title = <div className=\"title title-large\">NanoSplit</div>;\n    } else if (this.state.run.game === \"\") {\n      title = (\n        <div className=\"title title-large\">{this.state.run.category}</div>\n      );\n    } else if (this.state.run.category === \"\") {\n      title = <div className=\"title title-large\">{this.state.run.game}</div>;\n    } else {\n      title = (\n        <div className=\"title\">\n          {this.state.run.game}\n          <br />\n          {this.state.run.category}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"clickable\" onClick={clickAction} />\n        <div className=\"header\">\n          <div className=\"title-bar\">\n            <div className=\"sidenav-menu\" onClick={this.openMenu}>\n              <FontAwesomeIcon icon=\"bars\" />\n            </div>\n            {title}\n          </div>\n          <div onClick={clickAction}>\n            <Timer time={this.state.currentTime} />\n          </div>\n        </div>\n        <div className=\"splits\" id=\"splits\" onClick={clickAction}>\n          {splits}\n        </div>\n        <div id=\"controls\" className=\"controls\">\n          <button className=\"controls-button ml-0\" onClick={this.undoSegment}>\n            Undo\n          </button>\n          <button className=\"controls-button\" onClick={this.skipSegment}>\n            Skip\n          </button>\n          <button className=\"controls-button\" onClick={this.resetTimer}>\n            Reset\n          </button>\n          <button className=\"controls-button mr-0\" onClick={lastControlAction}>\n            {lastControlText}\n          </button>\n        </div>\n        <Menu isOpen={this.state.showMenu} closeCallback={this.closeMenu}>\n          <div className=\"sidenav-item\" onClick={this.openNewSplits}>\n            New splits\n          </div>\n          <div className=\"sidenav-item\" onClick={this.openEditSplits}>\n            Edit splits\n          </div>\n          <div className=\"sidenav-item\" onClick={this.openImport}>\n            Import\n          </div>\n          <div className=\"sidenav-item\">Export</div>\n          <div className=\"sidenav-item\">Settings</div>\n        </Menu>\n        <Dialog\n          isOpen={this.state.showDialog}\n          onClose={this.closeDialog}\n          options={this.state.dialog.options}\n        >\n          {this.state.dialog.contents}\n        </Dialog>\n      </div>\n    );\n  }\n\n  private startTimer = () => {\n    clearInterval(this.interval);\n    this.setState({\n      currentSplit: 0,\n      history: [{ segmentTimes: [] }],\n      isPaused: false,\n      isTiming: true,\n      startTime: Date.now()\n    });\n    this.createInterval();\n\n    this.scrollToSplit(0);\n  };\n\n  private splitTimer = () => {\n    if (this.state.isPaused || !this.state.isTiming) {\n      return;\n    }\n\n    let currentSplit = this.state.currentSplit;\n    this.setSegmentTime(this.state.currentTime);\n\n    // Stop the timer if this was the last split\n    if (this.state.currentSplit >= this.state.run.segments.length - 1) {\n      clearInterval(this.interval);\n      this.setState({\n        isTiming: false\n      });\n    } else {\n      currentSplit += 1;\n      this.setState({ currentSplit });\n    }\n\n    this.scrollToSplit(currentSplit);\n  };\n\n  private pauseTimer = () => {\n    clearInterval(this.interval);\n    this.setState({\n      isPaused: true\n    });\n  };\n\n  private resumeTimer = () => {\n    const now = Date.now();\n    this.setState({\n      isPaused: false,\n      startTime: now - this.state.currentTime\n    });\n    this.createInterval();\n  };\n\n  private resetTimer = () => {\n    clearInterval(this.interval);\n    this.setState({\n      currentSplit: 0,\n      currentTime: 0,\n      history: [{ segmentTimes: [] }],\n      isTiming: false\n    });\n  };\n\n  private undoSegment = () => {\n    if (this.state.currentSplit === 0 || !this.state.isTiming) {\n      return;\n    }\n\n    this.setState({\n      currentSplit: this.state.currentSplit - 1,\n      history: this.state.history.slice(0, this.state.currentSplit)\n    });\n  };\n\n  private skipSegment = () => {\n    if (!this.state.isTiming) {\n      return;\n    }\n\n    this.setSegmentTime(Constants.SKIPPED);\n\n    this.setState({\n      currentSplit: this.state.currentSplit + 1\n    });\n  };\n\n  private createInterval = () => {\n    this.interval = setInterval(() => {\n      this.setState({\n        currentTime: Date.now() - this.state.startTime\n      });\n    });\n  };\n\n  private setSegmentTime = (time: number) => {\n    const currentSplit = this.state.currentSplit;\n    const segmentTimes = this.state.history[currentSplit].segmentTimes.concat([\n      time\n    ]);\n    this.setState({\n      history: this.state.history.concat([{ segmentTimes }])\n    });\n  };\n\n  private scrollToSplit = (currentSplit: number) => {\n    if (document.documentElement === null) {\n      return;\n    }\n    const windowHeight = document.documentElement.clientHeight;\n    const controls = document.getElementById(\"controls\");\n    const splits = document.getElementById(\"splits\");\n    if (controls && splits) {\n      const controlsHeight = controls.getBoundingClientRect().height;\n      const splitsHeight = splits.getBoundingClientRect().height;\n      const numOfSplits = this.state.run.segments.length;\n      const bottom =\n        Constants.SPLITS_MARGIN +\n        splitsHeight -\n        (numOfSplits - currentSplit - 1) * Constants.SPLIT_HEIGHT;\n      const target = bottom - windowHeight + controlsHeight;\n      window.scrollTo({\n        behavior: \"smooth\",\n        left: 0,\n        top: target\n      });\n    }\n  };\n\n  private newSplits = () => {\n    const run: IRun = {\n      category: \"\",\n      game: \"\",\n      segments: []\n    };\n    this.setState({ run });\n    this.closeDialog();\n  };\n\n  private openNewSplits = () => {\n    this.setState({\n      dialog: {\n        contents: (\n          <div>\n            Are you sure you want to create new splits? Your previous splits\n            will be erased.\n          </div>\n        ),\n        options: {\n          onCancel: this.closeDialog,\n          onConfirm: this.newSplits,\n          showCancelButton: true,\n          showCloseButton: false,\n          showConfirmButton: true,\n          title: \"Create new splits\",\n          type: DialogType.Modal\n        }\n      },\n      showDialog: true,\n      showMenu: false\n    });\n  };\n\n  private openEditSplits = () => {\n    this.setState({\n      dialog: {\n        contents: (\n          <EditSplits run={this.state.run} onConfirm={this.confirmEditSplits} />\n        ),\n        options: {\n          showCloseButton: true,\n          title: \"Edit splits\",\n          type: DialogType.Fullscreen\n        }\n      },\n      showDialog: true,\n      showMenu: false\n    });\n  };\n\n  private openImport = () => {\n    this.setState({\n      dialog: {\n        contents: <ImportForm onImport={this.onImport} />,\n        options: {\n          showCloseButton: true,\n          title: \"Import\",\n          type: DialogType.Modal\n        }\n      },\n      showDialog: true,\n      showMenu: false\n    });\n  };\n\n  private onImport = (run: IRun) => {\n    this.setState({ run });\n    this.closeDialog();\n  };\n\n  private confirmEditSplits = (run: IRun) => {\n    this.setState({ run });\n    this.closeDialog();\n  };\n\n  private closeDialog = () => {\n    this.setState({ showDialog: false });\n    window.setTimeout(() => {\n      this.setState({\n        dialog: {\n          options: {\n            showCloseButton: true,\n            title: \"\",\n            type: DialogType.Modal\n          }\n        }\n      });\n    }, Constants.DIALOG_CLOSE_TIME_IN_MS);\n  };\n\n  private openMenu = () => {\n    this.setState({ showMenu: true });\n  };\n\n  private closeMenu = () => {\n    this.setState({ showMenu: false });\n  };\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}